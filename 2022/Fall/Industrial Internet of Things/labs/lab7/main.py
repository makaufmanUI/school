"""
main.py

The main script for the lab.
Contains the main window and the main loop.
"""
import sys
import warnings
from db import DB
from util import *
from adc import ADC
import pyqtgraph as pg
from pyqtgraph import PlotWidget
from PyQt5 import QtCore, QtGui, QtWidgets

warnings.filterwarnings("ignore")

def handler(msg_type, msg_log_context, msg_string):
    pass

QtCore.qInstallMessageHandler(handler)



class UI_MainWindow(object):
    """
    Defines the main window class.
    Most of the code is generated by Qt Designer.
    """
    def SetupUI(self, main_window: QtWidgets.QMainWindow) -> None:
        self.counter = 0             # counter for number of seconds elapsed
        self.update_interval = 300   # update interval in seconds

        self.timer = QtCore.QTimer()            # timer to update the counter
        self.timer.setInterval(1000)            # set the timer interval to 1 second
        self.timer.timeout.connect(self.Update) # connect the timer to the Update function
        self.timer.start()

        main_window.setObjectName("main_window")
        main_window.resize(800,600)
        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")

        font = QtGui.QFont("Cambria Math", 11)
        self.Button_UpdateInterval = QtWidgets.QPushButton(self.centralwidget)
        self.Button_UpdateInterval.setGeometry(QtCore.QRect(620, 490, 131, 51))
        self.Button_UpdateInterval.setFont(font)
        self.Button_UpdateInterval.setObjectName("Button_UpdateInterval")
        self.Button_UpdateInterval.clicked.connect(self.ConfirmInterval)    # connect the button to the ConfirmInterval function

        self.Label_UpdateInterval = QtWidgets.QLabel(self.centralwidget)
        self.Label_UpdateInterval.setGeometry(QtCore.QRect(630, 410, 111, 31))
        self.Label_UpdateInterval.setFont(font)
        self.Label_UpdateInterval.setToolTip("")
        self.Label_UpdateInterval.setAlignment(QtCore.Qt.AlignCenter)
        self.Label_UpdateInterval.setObjectName("Label_UpdateInterval")

        self.Slider_UpdateInterval = QtWidgets.QSlider(self.centralwidget)
        self.Slider_UpdateInterval.setGeometry(QtCore.QRect(620, 450, 131, 22))
        self.Slider_UpdateInterval.setMinimum(30)
        self.Slider_UpdateInterval.setMaximum(300)
        self.Slider_UpdateInterval.setSingleStep(30)
        self.Slider_UpdateInterval.setPageStep(30)
        self.Slider_UpdateInterval.setProperty("value", 300)
        self.Slider_UpdateInterval.setOrientation(QtCore.Qt.Horizontal)
        self.Slider_UpdateInterval.setInvertedAppearance(False)
        self.Slider_UpdateInterval.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.Slider_UpdateInterval.setTickInterval(30)
        self.Slider_UpdateInterval.setObjectName("Slider_UpdateInterval")
        self.Slider_UpdateInterval.valueChanged.connect(self.update_interval)    # connect the slider to the update_interval function

        pg.setConfigOption('background', 'w')
        pg.setConfigOption('foreground', 'k')
        self.Graph_Temperature = PlotWidget(self.centralwidget)
        self.Graph_Temperature.setGeometry(QtCore.QRect(20, 10, 751, 381))
        self.Graph_Temperature.setFont(font)
        self.Graph_Temperature.setObjectName("Graph_Temperature")
        self.Graph_Temperature.setLabel('left', 'Temperature', units='Â°F', **{'font-size': '10pt'})
        self.Graph_Temperature.setLabel('bottom', 'Time', units='s', **{'font-size': '10pt'})
        self.Graph_Temperature.setTitle('Temperature over Time', size='12pt')
        self.Graph_Temperature.showGrid(x=False, y=False)
        self.Graph_Temperature.setYRange(70,95)
        self.Graph_Temperature.enableAutoRange('x', True)

        self.Display_DateTime = QtWidgets.QLCDNumber(self.centralwidget)
        self.Display_DateTime.setGeometry(QtCore.QRect(110, 490, 471, 51))
        self.Display_DateTime.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Display_DateTime.setAutoFillBackground(False)
        self.Display_DateTime.setFrameShape(QtWidgets.QFrame.Box)
        self.Display_DateTime.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Display_DateTime.setLineWidth(1)
        self.Display_DateTime.setDigitCount(19)
        self.Display_DateTime.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.Display_DateTime.setObjectName("Display_DateTime")

        self.Label_DateTime = QtWidgets.QLabel(self.centralwidget)
        self.Label_DateTime.setGeometry(QtCore.QRect(20, 500, 81, 31))
        self.Label_DateTime.setFont(font)
        self.Label_DateTime.setAlignment(QtCore.Qt.AlignCenter)
        self.Label_DateTime.setObjectName("Label_DateTime")

        self.Display_Temperature = QtWidgets.QLCDNumber(self.centralwidget)
        self.Display_Temperature.setGeometry(QtCore.QRect(290, 420, 141, 51))
        self.Display_Temperature.setObjectName("Display_Temperature")
        
        self.Label_Temperature = QtWidgets.QLabel(self.centralwidget)
        self.Label_Temperature.setGeometry(QtCore.QRect(160, 430, 121, 31))
        self.Label_Temperature.setFont(font)
        self.Label_Temperature.setAlignment(QtCore.Qt.AlignCenter)
        self.Label_Temperature.setObjectName("Label_Temperature")
        
        main_window.setCentralWidget(self.centralwidget)
        
        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        main_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(main_window)
        self.statusbar.setObjectName("statusbar")
        main_window.setStatusBar(self.statusbar)
        self.Action_SavePlot = QtWidgets.QAction(main_window)
        self.Action_SavePlot.setFont( QtGui.QFont("MS Shell Dlg 2") )
        self.Action_SavePlot.setObjectName("Action_SavePlot")
        self.menuFile.addAction(self.Action_SavePlot)
        self.menubar.addAction(self.menuFile.menuAction())

        self.RetranslateUI(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def RetranslateUI(self, main_window: QtWidgets.QMainWindow) -> None:
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("main_window", "main_window"))
        self.Button_UpdateInterval.setToolTip(_translate("main_window", "Update the interval at which the data is pushed to the database."))
        self.Button_UpdateInterval.setText(_translate("main_window", "Update (300s)"))
        self.Label_UpdateInterval.setText(_translate("main_window", "Update Interval"))
        self.Display_DateTime.setToolTip(_translate("main_window", "The date and time of the most recent temperature reading."))
        self.Display_Temperature.setToolTip(_translate("main_window", "The last recorded temperature value."))
        self.Label_DateTime.setText(_translate("main_window", "Date/Time"))
        self.Label_Temperature.setText(_translate("main_window", "Temperature (F)"))
        self.menuFile.setTitle(_translate("main_window", "File"))
        self.Action_SavePlot.setText(_translate("main_window", "Save Plot"))
        self.Action_SavePlot.setStatusTip(_translate("main_window", "Save the plot to a file."))
        self.Action_SavePlot.setShortcut(_translate("main_window", "Ctrl+S"))
        
        self.Action_SavePlot.triggered.connect(self.SavePlot)   # connect the save plot action to the SavePlot function

    def Tick(self) -> None:
        """
        Increments the counter by 1.
        This is used to keep track of time.
        """
        self.counter += 1
    
    def Update(self) -> None:
        """
        Updates the temperature and date/time displays as well as the graph.
        """
        self.Tick()
        temp = to_fahrenheit(T2(adc.read()))
        temperatures.append(temp)
        self.Display_Temperature.display(round(temp,3))
        self.Display_DateTime.display("{} {}".format(*get_datetime()))
        
        self.Graph_Temperature.plot(temperatures, clear=True, pen=pg.mkPen((31,119,180,255), width=2), fillLevel=0, brush=(31,119,180,75))

        if len(temperatures) >= 10:
            temperatures10.append( get_avg(temperatures,n=10) )
            self.Graph_Temperature.plot(temperatures10, clear=False, pen=pg.mkPen((255,155,68,155), width=2))   # orange moving average
        else:
            temperatures10.append( get_avg(temperatures,n=len(temperatures)) )

        if self.counter % self.update_interval == 0:     # only push to database every update_interval seconds
            database.push( round(get_avg(temperatures,n=10), 3) )

    def update_interval(self) -> None:
        """
        Updates the update interval,
        the value adjustable by the user via slider.
        """
        self.update_interval = self.Slider_UpdateInterval.value()
        self.Button_UpdateInterval.setText("Update (" + str(self.Slider_UpdateInterval.value()) + "s)")
    
    def ConfirmInterval(self) -> None:
        """
        Confirms the update interval,
        setting the value currently held by the slider.
        """
        self.update_interval = self.Slider_UpdateInterval.value()

    def SavePlot(self) -> None:
        """
        Saves the plot to a file, as a `.png` file.
        """
        exporter = pg.exporters.ImageExporter(self.Graph_Temperature.plotItem)
        exporter.export("plot.png")



if __name__ == "__main__":
    global adc              # ADC object
    global database         # database object
    global temperatures     # list of temperatures collected
    global temperatures10   # list of last 10 temperatures collected
    
    temperatures = []
    temperatures10 = []
    adc = ADC(input_channel = 0)
    database = DB("creds.json", "Lab7")
    
    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QMainWindow()
    UI = UI_MainWindow()
    UI.SetupUI(main_window)

    main_window.show()

    sys.exit(app.exec_())

